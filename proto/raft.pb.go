// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/raft.proto

/*
Package naive_raft is a generated protocol buffer package.

It is generated from these files:
	proto/raft.proto

It has these top-level messages:
	LogEntris
	AppendEntriesReq
	AppendEntriesResp
	CanvassReq
	CanvassResp
	LogReq
	LogResp
*/
package naive_raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LogEntris struct {
	Index int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Term  int32  `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Data  string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *LogEntris) Reset()                    { *m = LogEntris{} }
func (m *LogEntris) String() string            { return proto.CompactTextString(m) }
func (*LogEntris) ProtoMessage()               {}
func (*LogEntris) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogEntris) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntris) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntris) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type AppendEntriesReq struct {
	Term          int32        `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId      int32        `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex  int32        `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevTermIndex int32        `protobuf:"varint,4,opt,name=prevTermIndex" json:"prevTermIndex,omitempty"`
	LogEntris     []*LogEntris `protobuf:"bytes,5,rep,name=LogEntris" json:"LogEntris,omitempty"`
	LeaderCommit  int32        `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesReq) Reset()                    { *m = AppendEntriesReq{} }
func (m *AppendEntriesReq) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesReq) ProtoMessage()               {}
func (*AppendEntriesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppendEntriesReq) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReq) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesReq) GetPrevLogIndex() int32 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesReq) GetPrevTermIndex() int32 {
	if m != nil {
		return m.PrevTermIndex
	}
	return 0
}

func (m *AppendEntriesReq) GetLogEntris() []*LogEntris {
	if m != nil {
		return m.LogEntris
	}
	return nil
}

func (m *AppendEntriesReq) GetLeaderCommit() int32 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesResp struct {
	Term    int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResp) Reset()                    { *m = AppendEntriesResp{} }
func (m *AppendEntriesResp) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResp) ProtoMessage()               {}
func (*AppendEntriesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppendEntriesResp) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CanvassReq struct {
	Term         int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  int32 `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	LastLogIndex int32 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  int32 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *CanvassReq) Reset()                    { *m = CanvassReq{} }
func (m *CanvassReq) String() string            { return proto.CompactTextString(m) }
func (*CanvassReq) ProtoMessage()               {}
func (*CanvassReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CanvassReq) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *CanvassReq) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *CanvassReq) GetLastLogIndex() int32 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *CanvassReq) GetLastLogTerm() int32 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type CanvassResp struct {
	Term         int32 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VotedGranted bool  `protobuf:"varint,2,opt,name=votedGranted" json:"votedGranted,omitempty"`
}

func (m *CanvassResp) Reset()                    { *m = CanvassResp{} }
func (m *CanvassResp) String() string            { return proto.CompactTextString(m) }
func (*CanvassResp) ProtoMessage()               {}
func (*CanvassResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CanvassResp) GetTerm() int32 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *CanvassResp) GetVotedGranted() bool {
	if m != nil {
		return m.VotedGranted
	}
	return false
}

type LogReq struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *LogReq) Reset()                    { *m = LogReq{} }
func (m *LogReq) String() string            { return proto.CompactTextString(m) }
func (*LogReq) ProtoMessage()               {}
func (*LogReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LogReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type LogResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *LogResp) Reset()                    { *m = LogResp{} }
func (m *LogResp) String() string            { return proto.CompactTextString(m) }
func (*LogResp) ProtoMessage()               {}
func (*LogResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LogResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntris)(nil), "naive_raft.LogEntris")
	proto.RegisterType((*AppendEntriesReq)(nil), "naive_raft.AppendEntriesReq")
	proto.RegisterType((*AppendEntriesResp)(nil), "naive_raft.AppendEntriesResp")
	proto.RegisterType((*CanvassReq)(nil), "naive_raft.CanvassReq")
	proto.RegisterType((*CanvassResp)(nil), "naive_raft.CanvassResp")
	proto.RegisterType((*LogReq)(nil), "naive_raft.LogReq")
	proto.RegisterType((*LogResp)(nil), "naive_raft.LogResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AppendEntries service

type AppendEntriesClient interface {
	AppendEntriesRPC(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error)
}

type appendEntriesClient struct {
	cc *grpc.ClientConn
}

func NewAppendEntriesClient(cc *grpc.ClientConn) AppendEntriesClient {
	return &appendEntriesClient{cc}
}

func (c *appendEntriesClient) AppendEntriesRPC(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error) {
	out := new(AppendEntriesResp)
	err := grpc.Invoke(ctx, "/naive_raft.AppendEntries/AppendEntriesRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppendEntries service

type AppendEntriesServer interface {
	AppendEntriesRPC(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error)
}

func RegisterAppendEntriesServer(s *grpc.Server, srv AppendEntriesServer) {
	s.RegisterService(&_AppendEntries_serviceDesc, srv)
}

func _AppendEntries_AppendEntriesRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppendEntriesServer).AppendEntriesRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naive_raft.AppendEntries/AppendEntriesRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppendEntriesServer).AppendEntriesRPC(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppendEntries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "naive_raft.AppendEntries",
	HandlerType: (*AppendEntriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntriesRPC",
			Handler:    _AppendEntries_AppendEntriesRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/raft.proto",
}

// Client API for Canvass service

type CanvassClient interface {
	CanvassRPC(ctx context.Context, in *CanvassReq, opts ...grpc.CallOption) (*CanvassResp, error)
}

type canvassClient struct {
	cc *grpc.ClientConn
}

func NewCanvassClient(cc *grpc.ClientConn) CanvassClient {
	return &canvassClient{cc}
}

func (c *canvassClient) CanvassRPC(ctx context.Context, in *CanvassReq, opts ...grpc.CallOption) (*CanvassResp, error) {
	out := new(CanvassResp)
	err := grpc.Invoke(ctx, "/naive_raft.Canvass/CanvassRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Canvass service

type CanvassServer interface {
	CanvassRPC(context.Context, *CanvassReq) (*CanvassResp, error)
}

func RegisterCanvassServer(s *grpc.Server, srv CanvassServer) {
	s.RegisterService(&_Canvass_serviceDesc, srv)
}

func _Canvass_CanvassRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanvassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanvassServer).CanvassRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naive_raft.Canvass/CanvassRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanvassServer).CanvassRPC(ctx, req.(*CanvassReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Canvass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "naive_raft.Canvass",
	HandlerType: (*CanvassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanvassRPC",
			Handler:    _Canvass_CanvassRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/raft.proto",
}

// Client API for SetLog service

type SetLogClient interface {
	SetLogRPC(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogResp, error)
}

type setLogClient struct {
	cc *grpc.ClientConn
}

func NewSetLogClient(cc *grpc.ClientConn) SetLogClient {
	return &setLogClient{cc}
}

func (c *setLogClient) SetLogRPC(ctx context.Context, in *LogReq, opts ...grpc.CallOption) (*LogResp, error) {
	out := new(LogResp)
	err := grpc.Invoke(ctx, "/naive_raft.SetLog/SetLogRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SetLog service

type SetLogServer interface {
	SetLogRPC(context.Context, *LogReq) (*LogResp, error)
}

func RegisterSetLogServer(s *grpc.Server, srv SetLogServer) {
	s.RegisterService(&_SetLog_serviceDesc, srv)
}

func _SetLog_SetLogRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetLogServer).SetLogRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naive_raft.SetLog/SetLogRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetLogServer).SetLogRPC(ctx, req.(*LogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SetLog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "naive_raft.SetLog",
	HandlerType: (*SetLogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogRPC",
			Handler:    _SetLog_SetLogRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/raft.proto",
}

func init() { proto.RegisterFile("proto/raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0x5d, 0x2f, 0x10, 0x60, 0x00, 0x89, 0xf5, 0x7e, 0x45, 0x88, 0x95, 0x22, 0xef, 0x1e, 0x38,
	0xb1, 0x12, 0x48, 0xbd, 0xb6, 0x28, 0x42, 0x15, 0x15, 0x07, 0x9a, 0xf6, 0x5e, 0x19, 0xec, 0xa2,
	0x48, 0xcd, 0x47, 0x6d, 0x37, 0xea, 0x4f, 0xe8, 0x1f, 0xed, 0xff, 0xa8, 0xec, 0xa4, 0xc1, 0x49,
	0xa1, 0xb7, 0x99, 0x37, 0x9e, 0x97, 0x79, 0x6f, 0x26, 0x30, 0x4c, 0x45, 0xa2, 0x92, 0xff, 0x82,
	0xde, 0xab, 0xa9, 0x09, 0x31, 0xc4, 0x34, 0xcc, 0xf8, 0x9d, 0x46, 0xc8, 0x0a, 0xba, 0xeb, 0x64,
	0xbf, 0x8c, 0x95, 0x08, 0x25, 0xfe, 0x01, 0xad, 0x30, 0x66, 0xfc, 0xd9, 0x45, 0x1e, 0x9a, 0xb4,
	0x82, 0x3c, 0xc1, 0x18, 0x9a, 0x8a, 0x8b, 0xc8, 0xfd, 0x6a, 0x40, 0x13, 0x6b, 0x8c, 0x51, 0x45,
	0xdd, 0x86, 0x87, 0x26, 0xdd, 0xc0, 0xc4, 0xe4, 0x15, 0xc1, 0x70, 0x91, 0xa6, 0x3c, 0x66, 0x86,
	0x8e, 0xcb, 0x80, 0x3f, 0x96, 0xcd, 0xc8, 0x6a, 0x1e, 0x41, 0xe7, 0x81, 0x53, 0xc6, 0xc5, 0x8a,
	0x15, 0xa4, 0x65, 0x8e, 0x09, 0xf4, 0x53, 0xc1, 0xb3, 0x75, 0xb2, 0x5f, 0x99, 0x49, 0x1a, 0xa6,
	0x5e, 0xc1, 0xf0, 0x3f, 0x18, 0xe8, 0xfc, 0x96, 0x8b, 0x28, 0x7f, 0xd4, 0x34, 0x8f, 0xaa, 0x20,
	0x9e, 0x5b, 0xca, 0xdc, 0x96, 0xd7, 0x98, 0xf4, 0x66, 0x3f, 0xa7, 0x07, 0xe5, 0xd3, 0xb2, 0x18,
	0x58, 0x0e, 0x10, 0xe8, 0xe7, 0xa3, 0xf8, 0x49, 0x14, 0x85, 0xca, 0x75, 0xf2, 0xcf, 0xdb, 0x18,
	0x59, 0xc0, 0xb7, 0x9a, 0x4c, 0x99, 0x1e, 0xd5, 0xe9, 0x42, 0x5b, 0x3e, 0xed, 0x76, 0x5c, 0x4a,
	0x23, 0xb3, 0x13, 0xbc, 0xa7, 0xe4, 0x05, 0x01, 0xf8, 0x34, 0xce, 0xa8, 0x3c, 0x69, 0x92, 0x07,
	0xbd, 0x1d, 0x8d, 0x59, 0xc8, 0xa8, 0xe2, 0xa5, 0x4f, 0x36, 0x64, 0x66, 0xa5, 0x52, 0xd5, 0xad,
	0xb2, 0x31, 0xcd, 0x52, 0xe4, 0xda, 0x98, 0xc2, 0x28, 0x1b, 0x22, 0x4b, 0xe8, 0x95, 0x93, 0x9c,
	0xd0, 0x41, 0xa0, 0x9f, 0x25, 0x8a, 0xb3, 0x4b, 0x41, 0x63, 0xc5, 0x59, 0x21, 0xa6, 0x82, 0x91,
	0x31, 0x38, 0xeb, 0x64, 0x5f, 0x88, 0x31, 0xa7, 0x81, 0xac, 0xd3, 0xf8, 0x0b, 0x6d, 0x53, 0x95,
	0xa9, 0x6d, 0x0a, 0xaa, 0x98, 0x32, 0xdb, 0xc2, 0xa0, 0xe2, 0x2b, 0xbe, 0xae, 0xdf, 0xd3, 0xc6,
	0xc7, 0x63, 0x7b, 0x85, 0xf5, 0x6b, 0x1b, 0xfd, 0xf9, 0xa4, 0x2a, 0x53, 0xf2, 0x65, 0x76, 0x05,
	0xed, 0x42, 0x2d, 0x3e, 0x3f, 0xac, 0x60, 0xe3, 0xe3, 0x5f, 0x76, 0xe7, 0x61, 0x35, 0xa3, 0xdf,
	0x47, 0x71, 0xc3, 0x75, 0x01, 0xce, 0x0d, 0xd7, 0x3e, 0xe2, 0x33, 0xe8, 0xe6, 0x91, 0x66, 0xc2,
	0xb5, 0x23, 0xd3, 0x2c, 0xdf, 0x3f, 0x60, 0x9a, 0x61, 0xeb, 0x98, 0xff, 0x71, 0xfe, 0x16, 0x00,
	0x00, 0xff, 0xff, 0x56, 0x2f, 0x13, 0x09, 0xa3, 0x03, 0x00, 0x00,
}
